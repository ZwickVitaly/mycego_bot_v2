from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from api_services import post_works
from FSM import WorkListDelivery
from helpers import aget_user_by_id
from keyboards import call_back, delivery_keyboard, generate_works, menu_keyboard
from settings import logger

work_list_delivery_router = Router()


@work_list_delivery_router.callback_query(WorkListDelivery.choice_date)
async def add_delivery_date(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.delete()
    date = callback_query.data.split("_")[1]
    data["date"] = date
    await callback_query.message.answer(
        f"{date}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É:",
        reply_markup=await delivery_keyboard(),
    )
    await state.update_data(data)
    await state.set_state(WorkListDelivery.choice_delivery)


@work_list_delivery_router.callback_query(WorkListDelivery.choice_delivery)
async def add_delivery_work(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data["delivery_id"] = callback_query.data
    await callback_query.message.delete()
    await callback_query.message.answer(
        f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:",
        reply_markup=await generate_works(delivery=True),
    )
    await state.update_data(data)
    await state.set_state(WorkListDelivery.choice_work)


@work_list_delivery_router.callback_query(WorkListDelivery.choice_work)
@work_list_delivery_router.callback_query(WorkListDelivery.input_num)
async def add_works_delivery(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.delete()
    if callback_query.data == "send":
        date = data.get("date")
        works = data.get("works")
        delivery = data.get("delivery_id")

        if not works:
            await callback_query.message.answer(
                "‚ùóÔ∏è–í—ã –Ω–∏ —á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å‚ùóÔ∏è",
                reply_markup=menu_keyboard(callback_query.from_user.id),
            )
        else:
            user = await aget_user_by_id(callback_query.from_user.id)
            code = post_works(date, user.site_user_id, works, delivery)
            if code == 200:
                mes = "‚úÖ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ‚úÖ"
            elif code == 401:
                mes = "üõë–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å—É—â–µ—Å—Ç–≤—É–µ—Çüõë"
            elif code == 403:
                mes = "‚ùå–í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ‚ùå"
            else:
                mes = "‚ò£Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ò£Ô∏è"
            await callback_query.message.answer(
                mes,
                reply_markup=menu_keyboard(callback_query.from_user.id),
            )
        await state.clear()
    else:
        work_id = callback_query.data.split("_")
        data["current_work"] = int(work_id[1])
        await callback_query.message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        await state.update_data(data=data)
        await state.set_state(WorkListDelivery.input_num)


@work_list_delivery_router.message(WorkListDelivery.input_num)
async def nums_works(message: Message, state: FSMContext):
    data = await state.get_data()
    current_work = data.get("current_work")
    if current_work is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã —Å–Ω–∞—á–∞–ª–∞."
        )
        await state.set_state(WorkListDelivery.choice_work)
        return

    try:
        quantity = int(message.text)
        if quantity < 0:
            await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        else:
            if "works" not in data:
                data["works"] = (
                    {}
                )  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

            data["works"][
                current_work
            ] = quantity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
            await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ {quantity} –µ–¥–∏–Ω–∏—Ü —Ä–∞–±–æ—Ç—ã.")

            # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∑–∞–Ω—ã.",
                reply_markup=generate_works(delivery=True),
            )
            await state.update_data(data=data)
            await state.set_state(WorkListDelivery.choice_work)

    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=call_back
        )
