from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from api_services import post_works
from custom_filters import not_digits_filter
from FSM import WorkList
from helpers import aget_user_by_id
from keyboards import call_back, generate_works, menu_keyboard, second_menu, generate_departments
from settings import logger, COMMENTED_WORKS


work_list_router = Router()


@work_list_router.callback_query(WorkList.choice_date, F.data.startswith("prevdate"))
async def choose_department(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.delete()
    date = callback_query.data.split("_")[1]
    data["date"] = date
    await callback_query.message.answer(
        f"{date}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:", reply_markup=await generate_departments()
    )
    await state.update_data(data=data)
    await state.set_state(WorkList.choice_department)


@work_list_router.message(not_digits_filter, WorkList.input_num)
async def process_amount_invalid(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")


@work_list_router.message(WorkList.input_num)
async def nums_works(message: Message, state: FSMContext):
    data = await state.get_data()
    current_work = data.get("current_work")
    if current_work is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã —Å–Ω–∞—á–∞–ª–∞."
        )
        return
    try:
        quantity = int(message.text)
        if quantity < 0:
            await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        elif current_work in COMMENTED_WORKS and quantity > 720:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ —ç—Ç–æ–º—É –≤–∏–¥—É —Ä–∞–±–æ—Ç –Ω–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ 720 –º–∏–Ω—É—Ç!")
        else:
            if "works" not in data:
                data["works"] = (
                    {}
                )  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

            data["works"][
                current_work
            ] = quantity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
            await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ {quantity} –µ–¥–∏–Ω–∏—Ü —Ä–∞–±–æ—Ç—ã.")

            # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
            if current_work in COMMENTED_WORKS:
                await message.answer("–ö —ç—Ç–æ–º—É –≤–∏–¥—É —Ä–∞–±–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                await state.set_state(WorkList.send_comment)
                await state.update_data(data=data)
                return

            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∑–∞–Ω—ã.",
                reply_markup=await generate_departments(),
            )
            await state.update_data(data=data)
            await state.set_state(WorkList.choice_department)

    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=call_back
        )


@work_list_router.callback_query(F.data == "send", WorkList.choice_work)
@work_list_router.callback_query(F.data == "send", WorkList.choice_department)
async def send_works(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.delete()
    date = data.get("date")
    works = data.get("works")
    if not works:
        await callback_query.message.answer(
            "‚ùóÔ∏è–í—ã –Ω–∏ —á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å‚ùóÔ∏è",
            reply_markup=menu_keyboard(callback_query.from_user.id),
        )
    else:
        user = await aget_user_by_id(callback_query.from_user.id)
        user_id_site = user.site_user_id
        comment = data.get("comment", None)
        logger.success(works)
        for key, value in works.items():
            if key in COMMENTED_WORKS and COMMENTED_WORKS[key] not in comment:
                await callback_query.message.answer(
                    '‚ö†Ô∏è–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ "–î—Ä—É–≥–∏–µ —Ä–∞–±–æ—Ç—ã" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, '
                    "—á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ –≤ —Å–µ–±—è –≤–∫–ª—é—á–∞–ª–∏‚ö†Ô∏è",
                    reply_markup=second_menu,
                )
                await state.set_state(WorkList.send_comment)
                return
        else:
            logger.debug(f"{date, user_id_site, works, comment}")
            code = await post_works(date, user_id_site, works, comment=comment)
            if code == 200:
                mes = "‚úÖ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ‚úÖ"
            elif code == 401:
                mes = "üõë–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å—É—â–µ—Å—Ç–≤—É–µ—Çüõë"
            elif code == 403:
                mes = "‚ùå–í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ‚ùå"
            else:
                mes = "‚ò£Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ò£Ô∏è"
            await callback_query.message.answer(
                mes, reply_markup=menu_keyboard(callback_query.from_user.id)
            )
            await state.set_state(None)


@work_list_router.callback_query(WorkList.choice_work)
@work_list_router.callback_query(WorkList.input_num)
async def add_works(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.delete()
    work_id = callback_query.data.split("_")
    data["current_work"] = int(work_id[1])
    await state.update_data(data=data)
    await callback_query.message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(WorkList.input_num)


@work_list_router.callback_query(WorkList.choice_department)
async def add_work_list(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.delete()
    date = data.get("date")
    await callback_query.message.answer(
        f"{date}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:", reply_markup=await generate_works(callback_query.data)
    )
    await state.update_data(data)
    await state.set_state(WorkList.choice_work)


@work_list_router.message(WorkList.send_comment)
async def comment_work(message: Message, state: FSMContext):
    data = await state.get_data()
    comment = data.get("comment", "")
    current_work = data.get("current_work")
    if comment:
        comment += f"; "
    comment += f"{COMMENTED_WORKS[current_work]}: {message.text}"
    data["comment"] = comment
    await state.update_data(data=data)
    await state.set_state(WorkList.choice_department)
    await message.answer(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É—å—Ç–∞—Ç.",
        reply_markup=await generate_departments()
    )
