from itertools import groupby

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

from api_services import (  # get_data_delivery,
    generate_works_base,
    get_appointments,
    get_pay_sheet,
    get_request,
    get_statistic,
    get_works_lists,
)
from db import Message, Works, async_session
from FSM import (  # WorkListDelivery
    PaySheets,
    Requests,
    ViewWorkList,
    WorkGraf,
    WorkList,
)
from helpers import aget_user_by_id, anotify_admins, get_message_counts_by_user
from keyboards import (
    create_works_list,
    generate_current_week_works_dates,
    generate_next_week_dates_keyboard,
    generate_pay_sheets,
    menu_keyboard,
    type_request,
)
from settings import ADMINS, logger

main_menu_router = Router()


@main_menu_router.message(F.chat.type == "private")
async def main_menu_message_handler(message: types.Message, state: FSMContext):
    try:
        await state.clear()
        user = await aget_user_by_id(message.from_user.id)
        text = message.text
        if user:
            user_id_site = user.site_user_id
            if text == "üóì–ó–∞—è–≤–∫–∞ –≤ –≥—Ä–∞—Ñ–∏–∫":
                await state.set_state(WorkGraf.choice_date)
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
                    reply_markup=await generate_next_week_dates_keyboard(),
                )
            elif text == "üìï–ú–æ–∏ –∑–∞–ø–∏—Å–∏":
                ap_list = (await get_appointments(user_id_site)).get("message")
                await message.answer("–ó–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:")
                await state.set_state(WorkGraf.delete_row)
                if not ap_list:
                    await message.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                for index, item in enumerate(ap_list, start=1):
                    verified = "‚úÖ–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if item[3] else "‚õîÔ∏è–ù–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                    message_text = (
                        f'{index}. {item[0]} —Å {item[1].replace(":00:00", ":00")} '
                        f'–ø–æ {item[2].replace(":00:00", ":00")} \n{verified}'
                    )

                    keyboard = InlineKeyboardBuilder()
                    delete_button = types.InlineKeyboardButton(
                        text="üö´–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{item[4]}"
                    )
                    keyboard.add(delete_button)
                    if item[3]:
                        await message.answer(message_text)
                    else:
                        await message.answer(
                            message_text, reply_markup=keyboard.as_markup()
                        )
            elif text == "üî®–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∏—Å—Ç —Ä–∞–±–æ—Ç –Ω–∞ –¥–µ–Ω—å":
                await message.answer(
                    "‚ö†Ô∏è–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å, "
                    "–∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∑–∞–ø–∏—Å–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
                    "–ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∑–∞ –¥–µ–Ω—å.‚ö†Ô∏è"
                )
                mes = await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=await generate_current_week_works_dates()
                )
                await state.update_data(data={"mes": mes})
                await state.set_state(WorkList.choice_date)

            elif text == "üìù–ú–æ–∏ –ª–∏—Å—Ç—ã —Ä–∞–±–æ—Ç –∑–∞ –¥–µ–Ω—å":
                works_lists = (await get_works_lists(user_id_site)).get("data")
                if len(works_lists) > 0:
                    mes = await message.answer(
                        "–í–∞—à–∏ —Å–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã:",
                        reply_markup=await create_works_list(works_lists),
                    )
                    await state.update_data(data={"mes": mes})
                    await state.set_state(ViewWorkList.view_work)
                else:
                    await message.answer(
                        "–ù–∏ —á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        reply_markup=menu_keyboard(message.from_user.id),
                    )
            # elif text == "üõ†Ô∏è–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—ã –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ":
            #     await message.answer(
            #         "‚ö†Ô∏è–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ, "
            #         "–ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤–æ–∫ –∑–∞ –¥–µ–Ω—å.‚ö†Ô∏è"
            #     )
            #     mes = await message.answer(
            #         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=await generate_current_week_works_dates()
            #     )
            #     await state.update_data(data={"mes": mes})
            #     await state.set_state(WorkListDelivery.choice_date)
            # elif text == "üì¶–ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏":
            #     await state.set_state(ViewWorkList.del_work)
            #     await message.answer(
            #         "–í–∞—à–∏ —Å–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:",
            #         reply_markup=menu_keyboard(message.from_user.id),
            #     )
            #     data_delivery = (await get_data_delivery(user_id_site)).get("data", None)
            #     if data_delivery:
            #         logger.success(data_delivery)
            #         for key, value in data_delivery.items():
            #             message_bot = ""
            #
            #             key_list = key.split(";")
            #             message_bot += f"\n{key_list[0]} - {key_list[1]}\n"
            #             for i, j in value.items():
            #                 message_bot += f"    {i}: {j}\n"
            #             keyboard = InlineKeyboardBuilder()
            #             if key_list[3] == "False":
            #                 delete_button = types.InlineKeyboardButton(
            #                     text="üö´–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{key_list[2]}"
            #                 )
            #                 keyboard.add(delete_button)
            #             else:
            #                 message_bot += "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ"
            #             await message.answer(message_bot, reply_markup=keyboard.as_markup())
            #     else:
            #         await message.answer(
            #             "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é",
            #             reply_markup=menu_keyboard(message.from_user.id),
            #         )

            elif text == "üòµ‚Äçüí´–ù–æ—Ä–º–∞—Ç–∏–≤—ã":
                async with async_session() as session:
                    async with session.begin():
                        standards_q = await session.execute(
                            select(Works).order_by(Works.department_name, Works.name)
                        )
                        standards = standards_q.scalars()
                mes = ""
                if standards:
                    departments = {
                        k: list(g)
                        for k, g in groupby(standards, lambda w: w.department_name)
                    }
                    for dep, works in departments.items():
                        mes += f"{dep}:\n"
                        for work in works:
                            mes += f"\t- {work.name}: {work.standard}/—á–∞—Å\n"
                        mes += f"\n"
                await message.answer(mes or "–ù–æ—Ä–º–∞—Ç–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            elif text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                mess = ""
                await message.answer(
                    "–°–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å –∏ –±–µ–∑ —É—á–µ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è"
                )
                response = await get_statistic(user_id_site)
                if response:
                    data = response.get("data", None)
                    mess += (
                        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['profile'][0]}\n"
                        f"–°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: "
                        f"{data['profile'][1] if data['profile'][1] else '–ù–µ—Ç —Ä–∞–±–æ—Ç –∑–∞ 7 –¥–Ω–µ–π'}"
                        f"{'%' if data['profile'][1] else ''}\n"
                        f"{'–†–∞–±–æ—Ç—ã:\n' if data.get("work_summary") else ''}"
                    )
                    for key, value in data["work_summary"].items():
                        mess += f"    {key}: {value}\n"
                await message.answer(mess)
            elif text == "üêß–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ":
                await message.answer(
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–∂–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –≥—Ä–∞—Ñ–∏–∫–µ, "
                    "–ª–∏—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏–ª–∏ –∂–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –º–æ–∂–µ—Ç–µ "
                    "–≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∑–∞—è–≤–∫–æ–π"
                )
                data = (await get_request(user_id_site)).get("data", None)
                if data:
                    await message.answer("–í—Å–µ –∑–∞—è–≤–∫–∏:")
                    for key, value in data.items():
                        result = "–°–¥–µ–ª–∞–Ω–æ" if value["result"] else "–û—Ç–∫–∞–∑"
                        comment_admin = (
                            value["comment_admin"] if value["comment_admin"] else "–ù–µ—Ç"
                        )
                        if value["result"] is None:
                            result = "–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
                        await message.answer(
                            f"{key}"
                            f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {value["comment"]}'
                            f"\n–†–µ—à–µ–Ω–∏–µ: {result}"
                            f"\n–û—Ç–≤–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: {comment_admin}\n"
                        )
                await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏", reply_markup=type_request)
                await state.set_state(Requests.type)

            elif text == "üí∞–†–∞—Å—á–µ—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã":
                data = await state.get_data()
                api_data = (await get_pay_sheet(user_id_site)).get("data")
                if not api_data:
                    await message.answer("–†–∞—Å—á—ë—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    data["api_data"] = api_data
                    await message.answer(
                        "5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤:",
                        reply_markup=await generate_pay_sheets(api_data),
                    )

                    await state.update_data(data)
                    await state.set_state(PaySheets.choice_list)

            elif text == "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç":
                await generate_works_base()
                await message.answer("–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")

            elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤":
                results = await get_message_counts_by_user()
                await message.answer(f"–¢–æ–ø 10 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å {results[1]} –ø–æ {results[2]}")
                for result in results[0]:
                    await message.answer(f"{result[0]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result[-1]}")
            else:
                await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start")
                # await bot_start(message, state)
            await anotify_admins(message.bot, f"{user.username} - {message.text}", ADMINS)

        else:
            await message.answer("–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        async with async_session() as session:
            async with session.begin():
                message = Message(user_id=message.from_user.id, text=text)
                session.add(message)
                await session.commit()
    except Exception as e:
        logger.exception(e)
        await state.clear()
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω—ã –≤ –∫—É—Ä—Å–µ.")
        await anotify_admins(
            message.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"{message.from_user.id}; —Ç–µ–∫—Å—Ç: {message.text}, –ø—Ä–∏—á–∏–Ω–∞: {e}",
            admins_list=ADMINS
        )
