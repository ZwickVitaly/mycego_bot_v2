from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, Message
from api_services import update_user_bio
from api_services.google_sheets import create_new_worker_cell
from celery_actions.integration_questionnaires.first_day import run_first_day_survey
from celery_actions.integration_questionnaires.monthly import run_monthly_survey
from celery_actions.integration_questionnaires.one_week import run_first_week_survey
from FSM import AcquaintanceState
from helpers import anotify_admins, aget_user_by_id
from keyboards import generate_acquaintance_proceed_keyboard, menu_keyboard
from messages import (
    ACQUAINTANCE_ABOUT_US_MESSAGE,
    ACQUAINTANCE_SECOND_MESSAGE,
    AFTER_ACQUAINTANCE_MESSAGE,
    VACANCIES_LINK,
)

from settings import ADMINS, BASE_DIR, TIMEZONE, logger
from utils import RedisKeys, redis_connection

# –†–æ—É—Ç–µ—Ä –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
acquaintance_router = Router()


@acquaintance_router.message(
    AcquaintanceState.waiting_for_date_of_birth, F.chat.type == "private"
)
async def process_date_of_birth(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É
        try:
            dob = datetime.strptime(message.text, "%d.%m.%Y").date()
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —à—É—Ç–Ω–∏–∫–æ–≤
            age = datetime.now().year - dob.year
            if 14 > age or age > 65:
                await message.answer(
                    "–®–∞–ª–æ—Å—Ç—å –ø–æ—á—Ç–∏ —É–¥–∞–ª–∞—Å—å! –ê —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
                )
                return
        except (ValueError, TypeError):
            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            await message.answer(
                "–î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2001)"
            )
            return
        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ "–æ —Å–µ–±–µ"
        await message.answer(ACQUAINTANCE_SECOND_MESSAGE)
        await state.set_state(AcquaintanceState.waiting_for_about_me)
        await state.update_data({"date_of_birth": dob.strftime("%Y-%m-%d")})
    except Exception as e:
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.exception(e)
        # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω—ã –≤ –∫—É—Ä—Å–µ.")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        await anotify_admins(
            message.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}, –æ—à–∏–±–∫–∞: {e}",
            admins_list=ADMINS,
        )


@acquaintance_router.message(
    AcquaintanceState.waiting_for_about_me, F.chat.type == "private"
)
async def process_about_me_block(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ '–æ —Å–µ–±–µ'
    """
    try:
        data = await state.get_data()
        about_me = data.get("about_me") or ""
        about_me += " " + (message.text.strip() if message.text else "")
        data["about_me"] = about_me
        await state.update_data(data)
        if len(about_me.strip()) == 0:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚ò∫Ô∏è\n\n")
        elif len(about_me) < 50:
            await message.answer(
                "–•–º, –Ω–µ –≥—É—Å—Ç–æ ü•≤\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å! "
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–±–æ–ª—å—à–µ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                "–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–µ–º—É —Ç–æ, —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º."
            )
        elif len(about_me) < 100:
            await message.answer(
                "–•–æ—Ä–æ—à–æ! –ù–æ —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ —á—É—Ç–æ—á–∫—É –±–æ–ª—å—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n"
                "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è –∑–∞–ø–æ–º–Ω–∏–ª."
            )
        else:
            if len(about_me) > 255:
                about_me = about_me[:255]
            user_site_id = data.get("user_site_id")
            dob = data.get("date_of_birth")
            try:
                upd = await update_user_bio(user_site_id, dob, about_me)
                if not upd:
                    raise ValueError("Response != 200")
            except Exception as e:
                logger.error(
                    f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –î–† –∏ –•–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç: {e}"
                )
                await anotify_admins(
                    message.from_user.bot,
                    f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –î–† –∏ –•–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç: {e}",
                    ADMINS,
                )

            await message.answer(
                ACQUAINTANCE_ABOUT_US_MESSAGE,
                reply_markup=await generate_acquaintance_proceed_keyboard(),
            )
            await state.set_state(AcquaintanceState.waiting_for_confirmation)

    except Exception as e:
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.exception(e)
        # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω—ã –≤ –∫—É—Ä—Å–µ. –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        await anotify_admins(
            message.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ '–æ —Å–µ–±–µ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}, –æ—à–∏–±–∫–∞: {e}",
            admins_list=ADMINS,
        )


@acquaintance_router.callback_query(
    AcquaintanceState.waiting_for_confirmation, F.data == "acquaintance_proceed"
)
async def process_confirmation(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ '–æ —Å–µ–±–µ'
    """
    try:
        data = await state.get_data()
        confirmations = data.get("confirmations") or 0
        await callback_query.message.delete_reply_markup()
        if not confirmations:
            photo_id = await redis_connection.get(RedisKeys.CAREER_IMAGE_ID)
            try:
                await callback_query.message.answer_photo(
                    photo=photo_id,
                    reply_markup=await generate_acquaintance_proceed_keyboard(),
                )
            except Exception as e:
                logger.error(f"{e}")
                career_jpg = FSInputFile(BASE_DIR / "static" / "career.jpg")
                msg = await callback_query.message.answer_photo(
                    photo=career_jpg,
                    reply_markup=await generate_acquaintance_proceed_keyboard(),
                )
                photo_id = msg.photo[-1].file_id
                await redis_connection.set(RedisKeys.CAREER_IMAGE_ID, photo_id)
        elif confirmations == 1:
            await callback_query.message.answer(
                VACANCIES_LINK,
                reply_markup=await generate_acquaintance_proceed_keyboard(),
                disable_web_page_preview=True,
            )
        elif confirmations == 2:
            contacts = await redis_connection.hgetall(RedisKeys.CONTACTS_KEY)
            if contacts:
                contacts_msg = ""
                for key, val in contacts.items():
                    contacts_msg += f"{key} - {val}\n"
                if contacts_msg:
                    contacts_msg = f"–í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n{contacts_msg}"
                    await callback_query.message.answer(
                        contacts_msg,
                        reply_markup=await generate_acquaintance_proceed_keyboard(),
                    )
            else:
                await callback_query.message.answer(
                    "–°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
                    reply_markup=await generate_acquaintance_proceed_keyboard(),
                )
        elif confirmations == 3:
            photo_id = await redis_connection.get(RedisKeys.PROMO_IMAGE_ID)
            if photo_id:
                try:
                    await callback_query.message.answer_photo(
                        photo=photo_id,
                        reply_markup=await generate_acquaintance_proceed_keyboard(),
                    )
                except TelegramBadRequest:
                    career_jpg = FSInputFile(BASE_DIR / "static" / "promo.jpg")
                    msg = await callback_query.message.answer_photo(
                        photo=career_jpg,
                        reply_markup=await generate_acquaintance_proceed_keyboard(),
                    )
                    photo_id = msg.photo[-1].file_id
                    await redis_connection.set(RedisKeys.PROMO_IMAGE_ID, photo_id)
        else:
            await callback_query.message.answer(
                AFTER_ACQUAINTANCE_MESSAGE,
                reply_markup=menu_keyboard(callback_query.from_user.id),
            )
            user = await aget_user_by_id(callback_query.from_user.id)
            logger.info(
                f"–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}"
            )
            await create_new_worker_cell(user)
            logger.warning(
                f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤ –¥–ª—è {callback_query.from_user.id}"
            )
            now = datetime.now(tz=TIMEZONE)
            first_day_timer = now.replace(hour=21, minute=0, second=0)
            # first_day_timer = now + timedelta(seconds=5)
            run_first_day_survey.apply_async(
                args=[callback_query.from_user.id], eta=first_day_timer
            )
            first_week_timer = now.replace(hour=8, minute=0, second=0) + timedelta(
                weeks=(1 if now.weekday() <= 1 else 2), days=(1 - now.weekday())
            )
            # first_week_timer = now + timedelta(seconds=35)
            run_first_week_survey.apply_async(
                args=[callback_query.from_user.id], eta=first_week_timer
            )
            first_month_timer = now.replace(hour=8, minute=0, second=0) + timedelta(
                days=31
            )
            # first_month_timer = now + timedelta(seconds=60)
            run_monthly_survey.apply_async(
                args=[callback_query.from_user.id, 1], eta=first_month_timer
            )
            second_month_timer = now.replace(hour=8, minute=0, second=0) + timedelta(
                days=61
            )
            # second_month_timer = now + timedelta(seconds=90)
            run_monthly_survey.apply_async(
                args=[callback_query.from_user.id, 2], eta=second_month_timer
            )
            third_month_timer = now.replace(hour=8, minute=0, second=0) + timedelta(
                days=91
            )
            # third_month_timer = now + timedelta(seconds=120)
            run_monthly_survey.apply_async(
                args=[callback_query.from_user.id, 3], eta=third_month_timer
            )
            await state.clear()
            return
        data["confirmations"] = confirmations + 1
        await state.set_data(data)
    except Exception as e:
        logger.error(f"{e}")
        await anotify_admins(
            callback_query.message.bot,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ schedulers. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.id}",
            ADMINS,
        )
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        await state.clear()
