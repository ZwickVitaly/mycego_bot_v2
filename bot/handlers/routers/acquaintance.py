import asyncio
from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from FSM import AcquaintanceState
from constructors import scheduler
from helpers import anotify_admins
from keyboards import menu_keyboard
from messages import (
    ACQUAINTANCE_SECOND_MESSAGE,
    ACQUAINTANCE_ABOUT_US_MESSAGE,
    AFTER_ACQUAINTANCE_MESSAGE,
    CAREER_PHOTO_PATH, VACANCIES_LINK, PROMO_MESSAGE
)
from schedules import after_first_day_survey_start
from settings import ADMINS, logger, TIMEZONE
from utils import redis_connection, RedisKeys

# –†–æ—É—Ç–µ—Ä –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
acquaintance_router = Router()


@acquaintance_router.message(AcquaintanceState.waiting_for_date_of_birth, F.chat.type == "private")
async def process_date_of_birth(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É
        try:
            dob = datetime.strptime(message.text, "%d.%m.%Y").date()
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —à—É—Ç–Ω–∏–∫–æ–≤
            age = (datetime.now().year - dob.year)
            if 14 > age or age > 65:
                await message.answer("–®–∞–ª–æ—Å—Ç—å –ø–æ—á—Ç–∏ —É–¥–∞–ª–∞—Å—å! –ê —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return
        except (ValueError, TypeError):
            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            await message.answer(
                "–î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2001)"
            )
            return
        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ "–æ —Å–µ–±–µ"
        await message.answer(ACQUAINTANCE_SECOND_MESSAGE)
        await state.set_state(AcquaintanceState.waiting_for_about_me)
    except Exception as e:
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.exception(e)
        # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω—ã –≤ –∫—É—Ä—Å–µ.")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        await anotify_admins(
            message.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}, –æ—à–∏–±–∫–∞: {e}",
            admins_list=ADMINS,
        )


@acquaintance_router.message(AcquaintanceState.waiting_for_about_me, F.chat.type == "private")
async def process_date_of_birth(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ '–æ —Å–µ–±–µ'
    """
    try:
        data = await state.get_data()
        about_me = data.get("about_me") or ""
        about_me += " " + message.text.strip()
        data["about_me"] = about_me
        await state.set_data(data)
        if len(about_me) == 0:
            await message.answer("–¢—Ä—é–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ —É–¥–∏–≤–∏—Ç ‚ò∫Ô∏è\n\n")
        elif len(about_me) < 50:
            await message.answer(
                "–•–º, –Ω–µ –≥—É—Å—Ç–æ ü•≤\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å! "
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–±–æ–ª—å—à–µ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                "–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–µ–º—É —Ç–æ, —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º."
            )
        elif len(about_me) < 100:
            await message.answer(
                "–•–æ—Ä–æ—à–æ! –ù–æ —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ —á—É—Ç–æ—á–∫—É –±–æ–ª—å—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n"
                "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è –∑–∞–ø–æ–º–Ω–∏–ª."
            )
        else:
            logger.info(about_me)
            await message.answer(ACQUAINTANCE_ABOUT_US_MESSAGE)
            await asyncio.sleep(1)
            career = FSInputFile(CAREER_PHOTO_PATH)
            await message.answer_photo(photo=career)
            await asyncio.sleep(1)
            await message.answer(VACANCIES_LINK)
            await asyncio.sleep(1)
            contacts = await redis_connection.hgetall(RedisKeys.CONTACTS_KEY)
            if contacts:
                contacts_msg = ""
                for key, val in contacts.items():
                    contacts_msg += f"{key} - {val}\n"
                if contacts_msg:
                    contacts_msg = f"–í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n{contacts_msg}"
                    await message.answer(contacts_msg)
                    await asyncio.sleep(1)
            await message.answer(PROMO_MESSAGE)
            await asyncio.sleep(1)
            await message.answer(AFTER_ACQUAINTANCE_MESSAGE, reply_markup=menu_keyboard(message.from_user.id))
            # first_day_timer = datetime.now(tz=TIMEZONE).replace(hour=21, minute=0, second=0)
            # scheduler.add_job(
            #     after_first_day_survey_start,
            #     "date",
            #     id=f"{RedisKeys.SCHEDULES_FIRST_DAY_KEY}_{message.from_user.id}",
            #     next_run_time=first_day_timer,
            #     args=[message.from_user.id],
            #     replace_existing=True,
            # )
            first_week_timer = datetime.now(TIMEZONE).replace(hour=8, minute=0, second=0) + timedelta(weeks=1)
            scheduler.add_job(
                after_first_day_survey_start,
                "date",
                id=f"{RedisKeys.SCHEDULES_ONE_WEEK_KEY}_{message.from_user.id}",
                next_run_time=first_week_timer,
                args=[message.from_user.id],
                replace_existing=True,
            )
            first_month_timer = datetime.now(TIMEZONE).replace(hour=8, minute=0, second=0) + timedelta(days=31)
            scheduler.add_job(
                after_first_day_survey_start,
                "date",
                id=f"{RedisKeys.SCHEDULES_ONE_MONTH_KEY}_{message.from_user.id}",
                next_run_time=first_month_timer,
                args=[message.from_user.id],
                replace_existing=True,
            )
            second_month_timer = datetime.now(TIMEZONE).replace(hour=8, minute=0, second=0) + timedelta(days=61)
            scheduler.add_job(
                after_first_day_survey_start,
                "date",
                id=f"{RedisKeys.SCHEDULES_TWO_MONTHS_KEY}_{message.from_user.id}",
                next_run_time=second_month_timer,
                args=[message.from_user.id],
                replace_existing=True,
            )
            third_month_timer = datetime.now(TIMEZONE).replace(hour=8, minute=0, second=0) + timedelta(days=91)
            scheduler.add_job(
                after_first_day_survey_start,
                "date",
                id=f"{RedisKeys.SCHEDULES_THREE_MONTHS_KEY}_{message.from_user.id}",
                next_run_time=third_month_timer,
                args=[message.from_user.id],
                replace_existing=True,
            )
            await state.clear()

    except Exception as e:
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.exception(e)
        # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω—ã –≤ –∫—É—Ä—Å–µ.")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        await anotify_admins(
            message.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ '–æ —Å–µ–±–µ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}, –æ—à–∏–±–∫–∞: {e}",
            admins_list=ADMINS,
        )

