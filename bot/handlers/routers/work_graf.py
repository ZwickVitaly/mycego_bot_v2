from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from api_services import create_or_get_apport, delete_appointments
from FSM import WorkGraf
from helpers import aget_user_by_id, anotify_admins
from keyboards import (
    generate_next_week_dates_keyboard,
    generate_time_keyboard,
    generate_time_keyboard2,
)
from settings import ADMINS, logger

# —Ä–æ—É—Ç–µ—Ä –∑–∞—è–≤–æ–∫ –≤ –≥—Ä–∞—Ñ–∏–∫
work_graf_router = Router()


@work_graf_router.callback_query(WorkGraf.choice_date, F.data.startswith("nextdate"))
async def process_date(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã –ø—Ä–∏ –∑–∞—è–≤–∫–µ –≤ –≥—Ä–∞—Ñ–∏–∫
    """
    try:
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback_query.message.delete()
        except TelegramBadRequest:
            pass
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        data = await state.get_data()
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
        date = callback_query.data.split("_")[1]
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
        data["date"] = date
        # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", reply_markup=await generate_time_keyboard()
        )
        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(data=data)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(WorkGraf.choice_time)
    except Exception as e:
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        logger.exception(e)
        # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.answer("‚ò£Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ò£Ô∏è")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await anotify_admins(
            callback_query.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≥—Ä–∞—Ñ–∏–∫ - –¥–∞—Ç–∞; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"{callback_query.from_user.id}; –¥–∞–Ω–Ω—ã–µ: {callback_query.data}, –ø—Ä–∏—á–∏–Ω–∞: {e}",
            admins_list=ADMINS,
        )


@work_graf_router.callback_query(WorkGraf.choice_time, F.data.startswith("start_time"))
@work_graf_router.callback_query(WorkGraf.choice_time, F.data == "back")
async def process_time(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç
    """
    try:
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback_query.message.delete()
        except TelegramBadRequest:
            pass
        if callback_query.data == "back":
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
                reply_markup=await generate_next_week_dates_keyboard(),
            )
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(WorkGraf.choice_date)
            # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            return
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        data = await state.get_data()
        # –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç
        start_time = callback_query.data.split()[-1]
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        data["start_time"] = start_time
        try:
            # –ø–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å
            chosen_hour = int(start_time.replace(":00", ""))
        except ValueError:
            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            await callback_query.message.answer(
                "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –í—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã 2 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥? "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å.",
            )
            return
        # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
            reply_markup=await generate_time_keyboard2(chosen_hour),
        )
        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(data=data)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(WorkGraf.choice_time2)
    except Exception as e:
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        logger.exception(e)
        # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.answer("‚ò£Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ò£Ô∏è")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await anotify_admins(
            callback_query.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≥—Ä–∞—Ñ–∏–∫ - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"{callback_query.from_user.id}; –¥–∞–Ω–Ω—ã–µ: {callback_query.data}, –ø—Ä–∏—á–∏–Ω–∞: {e}",
            admins_list=ADMINS,
        )


@work_graf_router.callback_query(WorkGraf.choice_time2, F.data.startswith("end_time"))
@work_graf_router.callback_query(WorkGraf.choice_time2, F.data == "back")
async def process_time2(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç
    """
    try:
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback_query.message.delete()
        except TelegramBadRequest:
            pass
        if callback_query.data == "Not available":
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è - –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
            return
        elif callback_query.data == "back":
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", reply_markup=await generate_time_keyboard()
            )
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(WorkGraf.choice_time)
            # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        else:
            # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
            data = await state.get_data()
            # –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            end_time = callback_query.data.split()[-1]
            start_time = data["start_time"]
            if start_time > end_time:
                await callback_query.message.answer(
                    "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç. "
                    "–í–æ–∑–º–æ–∂–Ω–æ –í—ã –Ω–∞–∂–∞–ª–∏ –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å."
                )
                return
            # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
            user = await aget_user_by_id(callback_query.from_user.id)
            # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä–∞—Ñ–∏–∫
            code = await create_or_get_apport(
                date=data["date"],
                start_time=start_time,
                end_time=end_time,
                user_id_site=user.site_user_id,
            )
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            if code == 401:
                await callback_query.message.answer(f"üõë–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—åüõë")
            elif code == 200:
                await callback_query.message.answer(
                    f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:\n{data["date"]} {data["start_time"]}- {end_time}\n‚úÖ–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞‚úÖ"
                )
            elif code == 403:
                await callback_query.message.answer(f"‚ùå–í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ‚ùå")
            elif code == 500:
                await callback_query.message.answer(f"‚ò£Ô∏è–û—à–∏–±–∫–∞‚ò£Ô∏è")
            # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await state.clear()
    except Exception as e:
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        logger.exception(e)
        # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.answer("‚ò£Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ò£Ô∏è")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await anotify_admins(
            callback_query.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≥—Ä–∞—Ñ–∏–∫ - –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"{callback_query.from_user.id}; –¥–∞–Ω–Ω—ã–µ: {callback_query.data}, –ø—Ä–∏—á–∏–Ω–∞: {e}",
            admins_list=ADMINS,
        )


@work_graf_router.callback_query(WorkGraf.delete_row)
async def del_row(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä–∞—Ñ–∏–∫
    """
    try:
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback_query.message.delete()
        except TelegramBadRequest:
            pass
        # –ø–æ–ª—É—á–∞–µ–º id –∑–∞—è–≤–∫–∏ –≤ –≥—Ä–∞—Ñ–∏–∫
        work_graf_id = callback_query.data.split("_")[1]
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
        user = await aget_user_by_id(callback_query.from_user.id)
        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä–∞—Ñ–∏–∫
        code = await delete_appointments(user.site_user_id, work_graf_id)
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if code == 200:
            await callback_query.message.answer("‚úÖ–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!‚úÖ")
        else:
            await callback_query.message.answer("‚ò£Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!‚ò£Ô∏è")
    except Exception as e:
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        logger.exception(e)
        # –æ—á–∏—â–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.answer("‚ò£Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ò£Ô∏è")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await anotify_admins(
            callback_query.bot,
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –≥—Ä–∞—Ñ–∏–∫ - —É–¥–∞–ª–µ–Ω–∏–µ; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"{callback_query.from_user.id}; –¥–∞–Ω–Ω—ã–µ: {callback_query.data}, –ø—Ä–∏—á–∏–Ω–∞: {e}",
            admins_list=ADMINS,
        )
